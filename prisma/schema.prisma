// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean?
  image         String?
  accounts      Account[]
  sessions      Session[]
  rooms         Room[]
  creator       Room[]    @relation("creator")
  Message       Message[]
  readRooms     Room[]    @relation("readMembers")

  Reaction Reaction[]
}

model Message {
  id                String     @id @default(cuid())
  message           String?
  roomId            String
  sentAt            DateTime
  senderId          String
  messageToAnswerId String?
  replies           Message[]  @relation("replyMessage")
  reactions         Reaction[]
  messageToAnswer   Message?   @relation("replyMessage", fields: [messageToAnswerId], references: [id])
  room              Room       @relation(fields: [roomId], references: [id])
  sender            User       @relation(fields: [senderId], references: [id])
}

model Reaction {
  id        String   @id @default(cuid())
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?
  reaction  String
  label     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  image        String?
  readMembers  User[]    @relation("readMembers")
  lastModified DateTime?
  id           String    @id @default(cuid())
  name         String
  messages     Message[]
  createdAt    DateTime
  creatorId    String?
  members      User[]
  creator      User?     @relation("creator", fields: [creatorId], references: [id])
  private      Boolean

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
